@startuml Диаграмма классов
  !theme plain
  skinparam BackgroundColor #fff
  skinparam ClassBorderColor #4940ad
  skinparam ClassBackgroundColor #efedff
  skinparam Handwritten false

  class Message {
    +string text
    +bool isSecure
    +void logMessage()
    +ByteVector convertToBytes()
    +BigInt convertToBigInt()
  }

  abstract Encryption

  class AsymmetricEncryption {
    -KeyPair keys;
    +AsymmetricEncryption(Parameters params = Parameters())
    +Message encode(Message m)
    +Message encode(Message m, PublicKey key)
    +Message decode(Message m)
    +Message decode(Message m, PrivateKey key)
  }
  class PublicKey {
    +BigInt e
    +BigInt n
    +PublicKey(BigInt e, BigInt n)
  }
  class PrivateKey {
    +BigInt d
    +BigInt n
    +PrivateKey(BigInt d, BigInt n)
  }
  class KeyPair {
    -PublicKey publicKey
    -PrivateKey privateKey
    +KeyPair(PublicKey publicKey, PrivateKey privateKey)
    +PublicKey getPublicKey()
    +PrivateKey getPrivateKey()
  }

  class KeysGenerator {
    #KeyPair keys
    +KeysGenerator(int primeLength)
    -BigInt getPublicExponent(BigInt φ)
    -BigInt multiplicativeInverseElement(BigInt e, BigInt φ)
    +KeyPair getKeys()
  }

  class CaesarEncryption {
    -int shift;
    -CharVector alphabet
    -AlphabetTable alphabetTable
    -int n
    +CaesarEncryption(Parameters params = Parameters())
    +Message encode(Message m)
    +Message encode(Message m, int shift)
    +Message decode(Message m)
    +Message decode(Message m, int shift)
  }

  class ShannonFanoEncryption {
    -CharVector alplabet
    -int blockSize
    -SymbolProbabilitiesTable symbolPr
    -ProbabilitiesTable probabilitiesTable
    -Codes codes
    -Codes codesInverse
    -double entropy
    -double avgLen 
    -IntVector uppercasePositions
    -IntVector punctuationPositions
    -CharVector punctuation
    +ShannonFanoEncryption(Parameters params = Parameters())
    -void createCodes(int start, int end)
    -int getSplitIndex(int start, int end)
    -void sortByProbability(ProbabilitiesTable* t)
    +string savePunctuation(string plainMsg)
    +string withPunctuation(string plainMsg)
    +Message encode(Message m)
    +Message decode(Message m)
  }

  abstract Encoder {
    Message encode(Message m)
  }

  abstract Decoder {
    Message decode(Message m)
  }

  class Parameters {
    +int shift
    +CharVector alphabet
    +DoubleVector probabilities
    +int blockSize
    +int primeLength
    +Parameters()
    +void setShift(int shift)
    +void setBlockSize(int blockSize)
    +void setPrimeLength(int primeLength)
  }

  class Encryptor {
    -Encryption* encryption
    +Encryptor(Encryption* encryption)
    +void setStrategy(Encryption* encryption)
    +Message encode(Message m)
    +Message decode(Message m)
  }

  class BigInt {
    -CharVector accumulator
    -bool isNegative
    +BigInt(string numberStr = ZERO, bool isNegative = false)
    +BigInt(long long number, bool isNegative = false)
    +void logNumber()
    +size_t length()
    +string getAccumator()
    +string getAccumatorWithSign()
    +bool getIsNegative()
    +BigInt& operator = (const BigInt& other)
    +bool operator == (BigInt other)
    +bool operator < (BigInt other)
    +bool operator > (BigInt other)
    +bool operator <= (BigInt other)
    +bool operator >= (BigInt other)
    +BigInt operator + (BigInt b)
    +BigInt& operator ++ (int)
    +BigInt& operator += (BigInt& other)
    +BigInt operator - (BigInt b)
    +BigInt& operator -- (int)
    +BigInt& operator -= (const BigInt& other)
    +BigInt operator * (BigInt b)
    +BigInt& operator *= (const BigInt& other)
    +BigInt operator / (BigInt bSigned)
    +BigInt& operator /= (const BigInt& other)
    +BigInt operator % (BigInt b)
    +BigInt& operator %= (const BigInt& other)
  }

  KeyPair o-- PrivateKey
  KeyPair o-- PublicKey

  Encoder <|-- Encryption
  Decoder <|-- Encryption

  Encryption <|.. AsymmetricEncryption
  Encryption <|.. CaesarEncryption
  Encryption <|.. ShannonFanoEncryption
  Encryption o-- Encryptor
  Encryption <-- Message

  AsymmetricEncryption *-- KeysGenerator
  AsymmetricEncryption <-- BigInt
  AsymmetricEncryption o-- Parameters
  CaesarEncryption o-- Parameters
  ShannonFanoEncryption o-- Parameters

  KeysGenerator *-- KeyPair
  KeysGenerator <-- BigInt
  
@enduml